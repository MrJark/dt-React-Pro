
import { ProductCard } from "../components"
import { ProductButtons, ProductImage, ProductTitle } from "../components/subCardComponent"
import { products } from "../constants/products"

import '../styles/customStyles.css'
import { useShoppingCart } from "../hooks/useShoppingCart"


export const ShoppingPage = () => {
    
    const { shoppingCart, onProductCountChange } = useShoppingCart(); // lo de abajo lo he pasado al custom hook
    // // const [ shoppingCart, setShoppingCart ] = useState<{ [ key: string ]: ProductInCart }>({ // forma de nombrar el useState
    // //     '1': { ...product1, count: 1}, // as√≠ luce el objeto que quiero que crear
    // //     '2': { ...product2, count: 2},
    // // });
    // const [ shoppingCart, setShoppingCart ] = useState<{ [ key: string ]: ProductInCart }>({}); // queremos que este estado sea el que predomine

    // const onProductCountChange = ({ count, product }: OnChangeArgs) => { // es la desestructuraci√≥n del event
    //     // console.log('onProductCountChange', {count, product});
    //     // shoppingCart[ product.id ] = { ...product, count } // funcionar√≠a pero ser√≠a una MALA PR√ÅCTICA porque estar√≠a mutando el shoppingCart
    //     // console.log({count});
        
    //     setShoppingCart( oldShoppingCart => {
    //         //* Tarea: eliminar el elemento cuando el count = 0 ‚ùå he intentado un if ( count === 0 ) return

    //         // if ( count === 0 ) {
    //         //     const { [product.id]: toDelete , ...rest } = oldShoppingCart;
    //         //     // delete {...oldShoppingCart}[product.id] // otra forma de hacerlo
    //         //     console.log(toDelete); // para que no salga el error
                
    //         //     return {
    //         //         ...rest
    //         //     }
    //         // }
    //         // return {
    //         //     ...oldShoppingCart,
    //         //     [product.id]: { ...product, count } // forma en la cual est√° estructurado el producto que es como est√° hecho el useState: la llave y el objeto
    //         // }

    //         const productInCart: ProductInCart = oldShoppingCart[product.id] || { ...product, count: 0 };

    //         if ( Math.max( productInCart.count + count, 0 ) > 0 ) {  // esto decia que eligiera el valor m√°ximo entre los dos para que as√≠ no de n√∫meros negativos
    //             productInCart.count += count;

    //             return {
    //                 ...oldShoppingCart,
    //                 [product.id] : productInCart
    //             }
    //         }

    //         // Si no se ejecuta lo anteriorüëÜüèΩ, hay que eliminar el productoüëáüèº
    //         const { [product.id]: toDelete , ...rest } = oldShoppingCart;

    //         return {
    //             ...rest
    //         };

    //     })
    // }

    return (
        <>
            <div>
                <h1>Shopping Page</h1>
                <hr />
                <div style={{ display: 'flex'}}>
                    {
                        products.map( product => (
                            <ProductCard 
                                key={ product.id }
                                product={ product }
                                className = 'bg-dark text-white'
                                onChange={ onProductCountChange } // si la mando as√≠, lo que estoy diciendo es que si el onChange al hacer click manda algo, ese algo ser√° el primer argumento que se reciba en la funci√≥n onProductCountChange de la otra manera, üëáüèº, yo estoy diciendo que argumento quiero que tenga, o si no quiero que tenga ninguno
                                // onChange={ () => onProductCountChange() }
                                value={ shoppingCart[product.id]?.count || 0 } // sino hay producto es cero, pero si s√≠ que hay, ser√° el valor del producto mismo
                            >
                                <ProductImage 
                                    className = 'custom-image'
                                />
                                <ProductTitle 
                                    className = 'text-white'
                                />
                                <ProductButtons 
                                    className = 'custom-buttons'
                                />
                            </ProductCard>
                        ))
                    }
                </div>
                <div className="shopping-cart">
                    {/* {
                        //* Tarea: intentar hacer el carrito din√°mico y que desaparezca cuando no hay productos ‚ùå se me hab√≠a ocurrido la siguiente soluci√≥n pero no funciona as√≠
                        products.map( product => (
                            !product 
                                ? ''
                                : 
                            <ProductCard 
                                key={ product.id }
                                product={ product }
                                style={{ width: '150px' }}
                                className = 'bg-dark text-white'
                                onChange={ onProductCountChange } // si la mando as√≠, lo que estoy diciendo es que si el onChange al hacer click manda algo, ese algo ser√° el primer argumento que se reciba en la funci√≥n onProductCountChange de la otra manera, üëáüèº, yo estoy diciendo que argumento quiero que tenga, o si no quiero que tenga ninguno
                                // onChange={ () => onProductCountChange() }
                            >
                                <ProductImage 
                                    className = 'custom-image'
                                />
                                <ProductTitle />
                                <ProductButtons 
                                    className = 'custom-buttons'
                                />
                            </ProductCard>
                        ))
                    } */}
                    {
                        // he tenido que transformar el shoppingCart que es donde tengo los productos, no en los productos mismo como hab√≠a hecho antes, en un arreglo para poder hacer el .map y en este recibo el key, que ser√° el sello de identidad, y el productInCart que es el producto en s√≠
                        Object.entries( shoppingCart ).map( ([ key, product]) => (
                            <ProductCard
                                key={key}
                                product={ product }
                                className = 'bg-dark text-white'
                                style = {{ width: '150px' }}
                                value = { product.count }
                                onChange={onProductCountChange}
                            >
                                <ProductImage 
                                    className = 'custom-image'
                                />
                                <ProductButtons 
                                    className = 'custom-buttons'
                                />
                            </ProductCard>
                        ))
                    }
                </div>
                {/* <div className="shopping-cart">
                <ProductCard
                    product={ product2 }
                    className = 'bg-dark text-white'
                    style={{ width: '150px' }}
                >
                    <ProductImage 
                        className = 'custom-image'
                    />
                    <ProductButtons 
                        className = 'custom-buttons'
                    />
                </ProductCard>
                </div> */}
            </div>
        </>
    )
}
